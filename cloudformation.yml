---
AWSTemplateFormatVersion: '2010-09-09'
Description: Serverless Contact Us form
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "Configuration"
        Parameters:
          - StoryblokOauthToken
          - StoryblokParentFolderId
          - StoryblokSpaceId
          - ToEmailAddress
          - ReCaptchaSecret
Parameters:
  ToEmailAddress:
    Type: String
    Description: Email address you want contact form submittions to go to
  ReCaptchaSecret:
    Type: String
    Description: Your Google reCAPTCHA secret
  StoryblokOauthToken:
    Type: String
    Description: Your Storyblok Oauth token
  StoryblokSpaceId:
    Type: String
    Description: Your Storyblok space ID
  StoryblokParentFolderId:
    Type: String
    Description: Your Storyblok parent folder ID
Resources:

  #
  # Role that our Lambda will assume to provide access to other AWS resources
  #
  IamRoleLambdaExecution:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: '/'

  #
  # Create a Policy and attach it to our Lambda Role.
  #
  IamPolicyLambdaExecution:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: IamPolicyLambdaExecution
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
          Resource: arn:aws:logs:us-east-1:*:*
        - Effect: Allow
          Action:
            - logs:PutLogEvents
          Resource: arn:aws:logs:us-east-1:*:*
          Resource: '*'
        - Effect: Allow
          Action:
            - ses:SendEmail
          Resource: '*'
      Roles:
      - Ref: IamRoleLambdaExecution

  #
  # Our Lambda function.
  #
  ContactUsFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Timeout: 5
      Role:
        Fn::GetAtt:
          - IamRoleLambdaExecution
          - Arn
      Code:
        ZipFile: !Sub |
          var https = require('https')
          var querystring = require('querystring')
          var AWS = require('aws-sdk')
          var responseHeaders = {
            'Access-Control-Allow-Origin': '*',
            'Access-Control-Allow-Credentials': true
          }

          var storyblokApiRequest = function(inputData, success, error) {
            var timestamp = Math.floor(Date.now() / 1000)
            var postData = JSON.stringify({
              story: {
                name: 'Contact entry - ' + timestamp,
                parent_id: ${StoryblokParentFolderId},
                content: {
                  component: 'form_entry',
                  name: inputData.name,
                  message: inputData.message
                }
              }
            })

            var options = {
              hostname: 'api.storyblok.com',
              port: 443,
              path: '/v1/spaces/${StoryblokSpaceId}/stories',
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
                'Content-Length': Buffer.byteLength(postData),
                'Authorization': '${StoryblokOauthToken}'
              }
            }

            var req = https.request(options, function(res) {
              res.setEncoding('utf8')
              res.on('data', function(chunk) {
                success(null, {
                  statusCode: '200',
                  headers: responseHeaders,
                  body: '{"success": true}'
                })
              })
            })

            req.on('error', function(e) {
              error(null, {
                statusCode: '500',
                headers: responseHeaders,
                body: JSON.stringify({message: e.message})
              })
            })

            req.write(postData)
            req.end()
          }

          var googleApiRequest = function(captchaResponse, success, error) {
            var postData = querystring.stringify({
              'secret': '${ReCaptchaSecret}',
              'response': captchaResponse
            })

            var options = {
              hostname: 'www.google.com',
              port: 443,
              path: '/recaptcha/api/siteverify',
              method: 'POST',
              headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
                'Content-Length': Buffer.byteLength(postData)
              }
            }

            var req = https.request(options, function(res) {
              res.setEncoding('utf8')
              res.on('data', function(chunk) {
                var captchaResponse = JSON.parse(chunk)
                if (captchaResponse.success) {
                  success()
                } else {
                  error(null, {
                    statusCode: '500',
                    headers: responseHeaders,
                    body: JSON.stringify({message: 'Invalid recaptcha'})
                  })
                }
              })
            })

            req.on('error', function(e) {
              error(null, {
                statusCode: '500',
                headers: responseHeaders,
                body: JSON.stringify({message: e.message})
              })
            })

            req.write(postData)
            req.end()
          }

          var sesApiRequest = function(inputData, success, error) {
            AWS.config.update({region: 'us-east-1'})

            var ses = new AWS.SES()

            ses.sendEmail({
              Destination: {
                ToAddresses: ['${ToEmailAddress}']
              },
              Message: {
                Body: {
                  Text: {
                    Data: JSON.stringify(inputData, null, 3),
                    Charset: 'UTF-8'
                  }
                },
                Subject: {
                  Data: 'Contact Form inquiry',
                  Charset: 'UTF-8'
                }
              },
              Source: '${ToEmailAddress}'
            }, function (err, response) {
              if (err !== null) {
                return error(err)
              }
              success(null, {
                statusCode: '200',
                headers: responseHeaders,
                body: JSON.stringify(response)
              })
            })
          }

          exports.handler = function (event, context, callback) {
            var inputData = JSON.parse(event.body)

            googleApiRequest(inputData['g-recaptcha-response'], function() {
              delete inputData['g-recaptcha-response']

              sesApiRequest(inputData, function() {
                storyblokApiRequest(inputData, callback, callback)
              }, callback)
            }, callback)
          }
      Runtime: nodejs10

  #
  # Create the API Gateway
  #
  ApiGatewayContactUs:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: ApiGatewayContactUs

  ApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Fn::GetAtt:
          - ApiGatewayContactUs
          - RootResourceId
      PathPart: api
      RestApiId:
        Ref: ApiGatewayContactUs

  ApiGatewayMethodOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      ResourceId:
        Ref: ApiGatewayResource
      RestApiId:
        Ref: ApiGatewayContactUs
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
            method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
            method.response.header.Access-Control-Allow-Credentials: "'false'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
            method.response.header.Access-Control-Allow-Credentials: true

  ApiGatewayMethodPost:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: POST
      RequestParameters: {}
      ResourceId:
        Ref: ApiGatewayResource
      RestApiId:
        Ref: ApiGatewayContactUs
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          Fn::Join:
            - ''
            - - 'arn:aws:apigateway:'
              - Ref: AWS::Region
              - ':lambda:path/2015-03-31/functions/'
              - Fn::GetAtt:
                - ContactUsFunction
                - Arn
              - '/invocations'
      MethodResponses: []

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId:
        Ref: ApiGatewayContactUs
      StageName: prod
    DependsOn:
    - ApiGatewayMethodPost
    - ApiGatewayMethodOptions

  #
  # We need to give API Gateway permission to invoke our Lambda function.
  #
  ContactUsFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName:
        Ref: ContactUsFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ''
          - - 'arn:aws:execute-api:'
            - Ref: AWS::Region
            - ':'
            - Ref: AWS::AccountId
            - ':'
            - Ref: ApiGatewayContactUs
            - '/*/*'

Outputs:
  ApiUrl:
    Description: URL of your API endpoint
    Value: !Join
      - ''
      - - https://
        - !Ref ApiGatewayContactUs
        - '.execute-api.'
        - !Ref 'AWS::Region'
        - '.amazonaws.com/prod/api'
